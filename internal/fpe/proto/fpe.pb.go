// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: fpe.proto

// package fpepb;

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FfxMode int32

const (
	FfxMode_FF1  FfxMode = 0
	FfxMode_FF31 FfxMode = 1
)

// Enum value maps for FfxMode.
var (
	FfxMode_name = map[int32]string{
		0: "FF1",
		1: "FF31",
	}
	FfxMode_value = map[string]int32{
		"FF1":  0,
		"FF31": 1,
	}
)

func (x FfxMode) Enum() *FfxMode {
	p := new(FfxMode)
	*p = x
	return p
}

func (x FfxMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FfxMode) Descriptor() protoreflect.EnumDescriptor {
	return file_fpe_proto_enumTypes[0].Descriptor()
}

func (FfxMode) Type() protoreflect.EnumType {
	return &file_fpe_proto_enumTypes[0]
}

func (x FfxMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FfxMode.Descriptor instead.
func (FfxMode) EnumDescriptor() ([]byte, []int) {
	return file_fpe_proto_rawDescGZIP(), []int{0}
}

type FpeFfxKeyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm               FfxMode `protobuf:"varint,1,opt,name=algorithm,proto3,enum=cryptokeeper.crypto.tink.FfxMode" json:"algorithm,omitempty"`
	PassthroughCharacterSet []byte  `protobuf:"bytes,2,opt,name=passthrough_character_set,json=passthroughCharacterSet,proto3" json:"passthrough_character_set,omitempty"`
	OutputCharacterSet      []byte  `protobuf:"bytes,3,opt,name=output_character_set,json=outputCharacterSet,proto3" json:"output_character_set,omitempty"`
	InputCharacterSet       []byte  `protobuf:"bytes,4,opt,name=input_character_set,json=inputCharacterSet,proto3" json:"input_character_set,omitempty"`
	MinInputLength          int32   `protobuf:"varint,5,opt,name=min_input_length,json=minInputLength,proto3" json:"min_input_length,omitempty"`
	MaxInputLength          int32   `protobuf:"varint,6,opt,name=max_input_length,json=maxInputLength,proto3" json:"max_input_length,omitempty"`
}

func (x *FpeFfxKeyParams) Reset() {
	*x = FpeFfxKeyParams{}
	mi := &file_fpe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FpeFfxKeyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpeFfxKeyParams) ProtoMessage() {}

func (x *FpeFfxKeyParams) ProtoReflect() protoreflect.Message {
	mi := &file_fpe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpeFfxKeyParams.ProtoReflect.Descriptor instead.
func (*FpeFfxKeyParams) Descriptor() ([]byte, []int) {
	return file_fpe_proto_rawDescGZIP(), []int{0}
}

func (x *FpeFfxKeyParams) GetAlgorithm() FfxMode {
	if x != nil {
		return x.Algorithm
	}
	return FfxMode_FF1
}

func (x *FpeFfxKeyParams) GetPassthroughCharacterSet() []byte {
	if x != nil {
		return x.PassthroughCharacterSet
	}
	return nil
}

func (x *FpeFfxKeyParams) GetOutputCharacterSet() []byte {
	if x != nil {
		return x.OutputCharacterSet
	}
	return nil
}

func (x *FpeFfxKeyParams) GetInputCharacterSet() []byte {
	if x != nil {
		return x.InputCharacterSet
	}
	return nil
}

func (x *FpeFfxKeyParams) GetMinInputLength() int32 {
	if x != nil {
		return x.MinInputLength
	}
	return 0
}

func (x *FpeFfxKeyParams) GetMaxInputLength() int32 {
	if x != nil {
		return x.MaxInputLength
	}
	return 0
}

// FPEKeyFormat specifies the format for generating new FPE keys.
type FPEKeyFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key size for FPE (e.g., 32 bytes for AES-based FPE).
	KeySize uint32 `protobuf:"varint,1,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
}

func (x *FPEKeyFormat) Reset() {
	*x = FPEKeyFormat{}
	mi := &file_fpe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FPEKeyFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FPEKeyFormat) ProtoMessage() {}

func (x *FPEKeyFormat) ProtoReflect() protoreflect.Message {
	mi := &file_fpe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FPEKeyFormat.ProtoReflect.Descriptor instead.
func (*FPEKeyFormat) Descriptor() ([]byte, []int) {
	return file_fpe_proto_rawDescGZIP(), []int{1}
}

func (x *FPEKeyFormat) GetKeySize() uint32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

// FPEKey represents a Format-Preserving Encryption (FPE) key.
type FPEKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the FPE key, used to manage key rotations and upgrades.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The master key used for FPE. Typically, this is a 32-byte key.
	MasterKey []byte `protobuf:"bytes,2,opt,name=master_key,json=masterKey,proto3" json:"master_key,omitempty"`
	// The tweak used for FPE. This has to be 7-byte key.
	Tweak  []byte           `protobuf:"bytes,3,opt,name=tweak,proto3" json:"tweak,omitempty"`
	Params *FpeFfxKeyParams `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *FPEKey) Reset() {
	*x = FPEKey{}
	mi := &file_fpe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FPEKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FPEKey) ProtoMessage() {}

func (x *FPEKey) ProtoReflect() protoreflect.Message {
	mi := &file_fpe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FPEKey.ProtoReflect.Descriptor instead.
func (*FPEKey) Descriptor() ([]byte, []int) {
	return file_fpe_proto_rawDescGZIP(), []int{2}
}

func (x *FPEKey) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FPEKey) GetMasterKey() []byte {
	if x != nil {
		return x.MasterKey
	}
	return nil
}

func (x *FPEKey) GetTweak() []byte {
	if x != nil {
		return x.Tweak
	}
	return nil
}

func (x *FPEKey) GetParams() *FpeFfxKeyParams {
	if x != nil {
		return x.Params
	}
	return nil
}

var File_fpe_proto protoreflect.FileDescriptor

var file_fpe_proto_rawDesc = []byte{
	0x0a, 0x09, 0x66, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x22, 0xc4, 0x02, 0x0a, 0x0f, 0x46, 0x70, 0x65, 0x46, 0x66, 0x78,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x66, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x61,
	0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x70,
	0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x29, 0x0a, 0x0c,
	0x46, 0x50, 0x45, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x06, 0x46, 0x50, 0x45, 0x4b,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x77, 0x65, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x77, 0x65, 0x61,
	0x6b, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x46, 0x70, 0x65,
	0x46, 0x66, 0x78, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2a, 0x1c, 0x0a, 0x07, 0x46, 0x66, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x46, 0x31, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x46, 0x33, 0x31,
	0x10, 0x01, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x76, 0x64, 0x70, 0x61, 0x72, 0x69, 0x6b, 0x68, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x66,
	0x70, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fpe_proto_rawDescOnce sync.Once
	file_fpe_proto_rawDescData = file_fpe_proto_rawDesc
)

func file_fpe_proto_rawDescGZIP() []byte {
	file_fpe_proto_rawDescOnce.Do(func() {
		file_fpe_proto_rawDescData = protoimpl.X.CompressGZIP(file_fpe_proto_rawDescData)
	})
	return file_fpe_proto_rawDescData
}

var file_fpe_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fpe_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fpe_proto_goTypes = []any{
	(FfxMode)(0),            // 0: cryptokeeper.crypto.tink.FfxMode
	(*FpeFfxKeyParams)(nil), // 1: cryptokeeper.crypto.tink.FpeFfxKeyParams
	(*FPEKeyFormat)(nil),    // 2: cryptokeeper.crypto.tink.FPEKeyFormat
	(*FPEKey)(nil),          // 3: cryptokeeper.crypto.tink.FPEKey
}
var file_fpe_proto_depIdxs = []int32{
	0, // 0: cryptokeeper.crypto.tink.FpeFfxKeyParams.algorithm:type_name -> cryptokeeper.crypto.tink.FfxMode
	1, // 1: cryptokeeper.crypto.tink.FPEKey.params:type_name -> cryptokeeper.crypto.tink.FpeFfxKeyParams
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_fpe_proto_init() }
func file_fpe_proto_init() {
	if File_fpe_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fpe_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fpe_proto_goTypes,
		DependencyIndexes: file_fpe_proto_depIdxs,
		EnumInfos:         file_fpe_proto_enumTypes,
		MessageInfos:      file_fpe_proto_msgTypes,
	}.Build()
	File_fpe_proto = out.File
	file_fpe_proto_rawDesc = nil
	file_fpe_proto_goTypes = nil
	file_fpe_proto_depIdxs = nil
}
